#include "DataManager.h"
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <sstream>
#include <filesystem>
#include <json/json.hpp>
#include <random>
#include <cmath>
#include <regex>

using json = nlohmann::json;


void DataManager::WriteData_bin(const char* FileName, DebrisList& debrisList)
{
    std::ofstream outFile(FileName, std::ios::binary);
    if (!outFile) 
    {
        std::cerr << "Error opening file for writing!\n";
        return;
    }
    outFile.write(reinterpret_cast<const char*>(debrisList.GetRawData()), debrisList.num * sizeof(Debris));
    outFile.close();
}

void DataManager::WriteData_csv(const char* FileName, DebrisList& debrisList)
{
    std::ofstream outFile(FileName);

    if (!outFile) {
        std::cerr << "Error opening file for writing!\n";
        return;
    }
    
    outFile << "a, e, i, o, w, m, rcs\n";

    for (int i = 0; i < debrisList.num; i++) 
    {
        outFile << debrisList[i].coord.a << ", " << debrisList[i].coord.e << ", " << debrisList[i].coord.i << ", " << debrisList[i].coord.o << ", " << debrisList[i].coord.w << ", " << debrisList[i].coord.m << ", " << debrisList[i].rcs << "\n";
    }

    outFile.close();
    std::cout << "CSV file written successfully!\n";
}

DebrisList DataManager::FetchMocatData_csv(const char* FileName)
{
    std::ifstream file(FileName);
    if (!file.is_open()) {
        std::cerr << "Error opening file" << std::endl;
        return DebrisList();
    }

    std::vector<Debris> debrisVec;

    std::string line;
    int LineNumber = -1;
    while (std::getline(file, line)) {
        std::stringstream ss(line);
        std::string cell;

        LineNumber++;

        if (LineNumber == 0) continue;

        Debris debris;

        int col = 0;
        while (std::getline(ss, cell, ',')) {
            if (col == 12)
            {
                debris.coord.e = std::stof(cell.substr(1, cell.length() - 2));
            }
            else if (col == 13) 
            {
                debris.coord.i = CapUtil::Deg2Rad(std::stof(cell.substr(1, cell.length() - 2)));
            }
            else if (col == 14)
            {
                debris.coord.o = CapUtil::Deg2Rad(std::stof(cell.substr(1, cell.length() - 2)));
            }
            else if (col == 15)
            {
                debris.coord.w = CapUtil::Deg2Rad(std::stof(cell.substr(1, cell.length() - 2)));
            }
            else if (col == 16)
            {
                debris.coord.m = CapUtil::Deg2Rad(std::stof(cell.substr(1, cell.length() - 2)));
            }
            else if (col == 25)
            {
                debris.coord.a = std::stof(cell.substr(1, cell.length() - 2));
            }
            else if (col == 30)
            {
                std::string SizeStr = cell.substr(1, cell.length() - 2);
                bool bIsLarge = SizeStr._Starts_with("L");
                bool bIsMedium = SizeStr._Starts_with("M");
                debris.rcs = bIsLarge ? 1. : bIsMedium ? .5 : .1;
                break;
            }
            debris.rcs = 0.;
            col++;
        }

        debrisVec.push_back(debris);
    }

    file.close();

    DebrisList debrisList(debrisVec.size());

    for (int i = 0; i < debrisVec.size(); i++) 
    {
        debrisList[i] = debrisVec[i];
    }

    return debrisList;
}

DebrisList DataManager::FetchLeoData_json(const char* FileName)
{
    std::cout << "Loading debris from " << FileName << std::endl;

    std::ifstream data_file(FileName, std::ifstream::binary);
    json jsonData = json::parse(data_file);

    int NumDebris = 0; // jsonData["objects"].size();
    int NumTotal = 0;

    std::vector<std::tuple<std::string, int>> Types;
    for (auto orbitObj : jsonData["objects"])
    {
        NumTotal++;
        if (orbitObj["type"] == "debris")
        {
            NumDebris++;
        }
        bool bFoundType = false;
        for (int i = 0; i < Types.size(); i++) {
            if (std::get<std::string>(Types[i]) == orbitObj["type"]) {
                bFoundType = true;
                std::get<int>(Types[i])++;
            }
        }
        if (!bFoundType) {
            Types.push_back({ orbitObj["type"] , 1 });
        }
    }
    for (int k = 0; k < Types.size(); k++)
    {
        std::cout << "Loaded " << std::get<int>(Types[k]) << " " << std::get<std::string>(Types[k]) << std::endl;
    }
    std::cout << NumTotal << "Total Objects" << std::endl;

    DebrisList debrisList(NumDebris);

    int i = 0;
    for (auto orbitObj : jsonData["objects"])
    {
        if (orbitObj["type"] == "debris")
        {
            vec3 pos = { (double)orbitObj["position"][0], (double)orbitObj["position"][1], (double)orbitObj["position"][2] };
            vec3 vel = { (double)orbitObj["velocity"][0], (double)orbitObj["velocity"][1], (double)orbitObj["velocity"][2] };
            debrisList[i].coord = CapUtil::CC_to_CK({ pos, vel });
            debrisList[i].rcs = 0;
            i++;
        }
    }

    return debrisList;
}

DebrisList DataManager::FetchData_bin(const char* FileName)
{
    std::ifstream inFile(FileName, std::ios::binary);
    if (!inFile) {
        std::cerr << "Error opening file for reading!\n";
        return DebrisList(0);
    }

    // Get file size
    inFile.seekg(0, std::ios::end);
    size_t fileSize = inFile.tellg();
    inFile.seekg(0, std::ios::beg);

    DebrisList debrisList(fileSize / sizeof(Debris));
    inFile.read(reinterpret_cast<char*>(debrisList.GetRawData()), fileSize);
    inFile.close();


    /*
    int Num = fileSize / sizeof(DebrisF);
    DebrisF* debrisListF = (DebrisF*)malloc(Num);
    inFile.read(reinterpret_cast<char*>(debrisListF), fileSize);
    inFile.close();

    DebrisList debrisList(Num);
    for (int i = 0; i < Num; i++) {
        debrisList[i].coord.a = debrisListF[i].coord.a;
        debrisList[i].coord.e = debrisListF[i].coord.e;
        debrisList[i].coord.i = debrisListF[i].coord.i;
        debrisList[i].coord.o = debrisListF[i].coord.o;
        debrisList[i].coord.w = debrisListF[i].coord.w;
        debrisList[i].coord.m = debrisListF[i].coord.m;
        debrisList[i].rcs = debrisListF[i].rcs;
    }
    */
    return debrisList;
}

DebrisList DataManager::FetchData_csv(const char* FileName)
{
    std::ifstream file(FileName);
    if (!file.is_open()) {
        std::cerr << "Error opening file" << std::endl;
        return DebrisList();
    }

    std::vector<Debris> debrisVec;

    std::string line;
    int LineNumber = -1;
    while (std::getline(file, line)) {
        std::stringstream ss(line);
        std::string cell;

        LineNumber++;

        if (LineNumber == 0) continue;

        Debris debris;

        int col = 0;
        while (std::getline(ss, cell, ',')) 
        {
            /*
            std::regex number_regex("-*\d*\.*\d*");
            auto words_begin = std::sregex_iterator(cell.begin(), cell.end(), number_regex);
            auto words_end = std::sregex_iterator();

            double Value = 0;
            for (std::sregex_iterator i = words_begin; i != words_end; ++i)
            {
                std::smatch match = *i;
                std::string match_str = match.str();
                Value = std::stod(match_str);
                break;
            }
            */

            double Value = std::stod(cell);

            if (col == 0) debris.coord.a = Value;
            else if (col == 1) debris.coord.e = Value;
            else if (col == 2) debris.coord.i = Value;
            else if (col == 3) debris.coord.o = Value;
            else if (col == 4) debris.coord.w = Value;
            else if (col == 5) debris.coord.m = Value;
            else if (col == 6) debris.rcs = Value;

            col++;
        }

        debrisVec.push_back(debris);
    }

    file.close();

    DebrisList debrisList(debrisVec.size());

    for (int i = 0; i < debrisVec.size(); i++)
    {
        debrisList[i] = debrisVec[i];
    }

    return debrisList;
}


double GetRandomFromHist(double start, double step, int* Hist, int Num, int RandValue)
{
    for (int i = 0; i < Num; i++) 
    {
        if (RandValue <= Hist[i]) return start + i * step + CapUtil::FRand(-step / 2., step / 2.);
    }

    return start + Num * step + CapUtil::FRand(-step / 2., step / 2.);

}

static double a_start = 6600, a_step = 10;
static int a_cum[331] = { 1, 1, 2, 2, 2, 2, 2, 2, 2, 4, 5, 5, 5, 7, 8, 9, 10, 12, 15, 18, 24, 30, 41, 48, 54, 61, 75, 86, 104, 119, 135, 157, 186, 220, 253, 298, 343, 387, 429, 477, 555, 618, 712, 785, 891, 994, 1108, 1233, 1385, 1538, 1736, 1928, 2084, 2289, 2493, 2714, 2954, 3175, 3397, 3612, 3849, 4109, 4357, 4603, 4827, 5066, 5284, 5481, 5634, 5787, 5912, 6030, 6127, 6218, 6307, 6402, 6502, 6608, 6718, 6785, 6865, 6920, 6987, 7049, 7098, 7157, 7197, 7235, 7289, 7324, 7387, 7421, 7460, 7502, 7522, 7559, 7587, 7614, 7644, 7666, 7688, 7711, 7734, 7751, 7782, 7820, 7886, 7949, 7984, 8002, 8020, 8032, 8062, 8076, 8106, 8123, 8144, 8172, 8192, 8218, 8237, 8262, 8291, 8317, 8342, 8370, 8403, 8432, 8469, 8519, 8569, 8597, 8633, 8663, 8700, 8725, 8752, 8777, 8797, 8830, 8853, 8869, 8881, 8901, 8914, 8925, 8933, 8943, 8950, 8955, 8960, 8965, 8967, 8970, 8975, 8978, 8981, 8985, 8989, 8991, 8994, 8995, 9004, 9008, 9009, 9010, 9011, 9014, 9016, 9019, 9022, 9023, 9024, 9026, 9027, 9028, 9032, 9032, 9037, 9045, 9048, 9052, 9053, 9055, 9057, 9057, 9058, 9058, 9058, 9058, 9058, 9059, 9059, 9059, 9059, 9059, 9060, 9060, 9064, 9065, 9067, 9067, 9067, 9068, 9068, 9069, 9071, 9073, 9074, 9074, 9074, 9074, 9074, 9075, 9075, 9075, 9076, 9077, 9078, 9078, 9079, 9079, 9079, 9079, 9079, 9079, 9079, 9080, 9080, 9080, 9080, 9081, 9083, 9083, 9084, 9084, 9084, 9084, 9084, 9085, 9086, 9086, 9086, 9086, 9086, 9087, 9087, 9087, 9088, 9088, 9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089, 9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9091, 9092 };

static double e_start = 0, e_step = 0.0005;
static int e_cum[612] = {};

static double i_start = 0, i_step = .01;
static int i_cum[300] = { 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 3, 5, 6, 7, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 20, 23, 25, 27, 66, 77, 82, 86, 89, 97, 120, 121, 121, 121, 123, 123, 123, 123, 123, 123, 123, 126, 128, 129, 130, 132, 132, 132, 132, 134, 134, 135, 142, 142, 143, 143, 146, 147, 151, 155, 170, 178, 182, 214, 225, 225, 236, 236, 239, 240, 244, 259, 265, 269, 269, 271, 273, 273, 277, 278, 280, 282, 337, 371, 404, 406, 422, 509, 779, 857, 973, 1003, 1016, 1017, 1020, 1026, 1083, 1264, 1355, 1355, 1355, 1357, 1474, 2231, 2236, 2237, 2244, 2244, 2244, 2244, 2244, 2247, 2249, 2255, 2260, 2338, 2375, 2497, 3107, 3154, 3154, 3154, 3154, 3155, 3269, 3269, 3270, 3275, 3341, 3886, 3942, 4140, 4142, 4142, 4143, 4143, 4143, 4143, 4143, 4144, 4146, 4151, 4159, 4182, 4329, 4911, 7575, 8111, 8451, 8554, 8624, 8838, 9058, 9114, 9122, 9123, 9123, 9124, 9127, 9129, 9129, 9129, 9132, 9132, 9132, 9132, 9132, 9132, 9132, 9132, 9132, 9132, 9132, 9132, 9133, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9134, 9137, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140, 9140 };

static double o_start = 0, o_step = .01;
static int o_cum[316] = { 0, 29, 55, 89, 118, 146, 176, 209, 248, 276, 306, 343, 376, 400, 434, 462, 484, 513, 532, 553, 578, 606, 631, 662, 685, 706, 732, 757, 783, 811, 833, 865, 895, 922, 946, 970, 1000, 1037, 1070, 1101, 1119, 1148, 1182, 1215, 1243, 1279, 1322, 1362, 1403, 1448, 1487, 1555, 1685, 1765, 1841, 1894, 1938, 1996, 2036, 2084, 2132, 2173, 2199, 2235, 2272, 2313, 2345, 2380, 2429, 2473, 2516, 2558, 2609, 2642, 2672, 2715, 2745, 2785, 2825, 2863, 2903, 2934, 2965, 2999, 3035, 3063, 3096, 3136, 3164, 3185, 3217, 3259, 3296, 3329, 3358, 3379, 3415, 3442, 3486, 3516, 3557, 3592, 3622, 3668, 3703, 3731, 3758, 3801, 3838, 3876, 3906, 3942, 3975, 4002, 4031, 4066, 4124, 4150, 4182, 4215, 4242, 4263, 4294, 4323, 4360, 4387, 4429, 4457, 4496, 4527, 4569, 4597, 4628, 4654, 4698, 4736, 4766, 4811, 4846, 4875, 4912, 4938, 4967, 5004, 5035, 5070, 5103, 5138, 5170, 5192, 5218, 5247, 5280, 5301, 5341, 5370, 5407, 5426, 5453, 5485, 5517, 5544, 5583, 5614, 5643, 5673, 5693, 5725, 5755, 5784, 5810, 5833, 5861, 5899, 5939, 5957, 5987, 6010, 6037, 6065, 6090, 6115, 6138, 6158, 6187, 6204, 6227, 6261, 6283, 6313, 6333, 6360, 6391, 6416, 6435, 6467, 6491, 6516, 6544, 6569, 6592, 6613, 6641, 6674, 6697, 6716, 6747, 6773, 6795, 6806, 6830, 6845, 6871, 6890, 6916, 6935, 6960, 6983, 7006, 7036, 7057, 7083, 7113, 7135, 7158, 7177, 7199, 7229, 7248, 7283, 7301, 7324, 7348, 7365, 7389, 7417, 7433, 7456, 7481, 7500, 7531, 7554, 7573, 7601, 7636, 7663, 7687, 7719, 7748, 7766, 7791, 7809, 7830, 7850, 7875, 7905, 7925, 7954, 7964, 7990, 8008, 8030, 8050, 8079, 8107, 8127, 8147, 8167, 8194, 8220, 8244, 8261, 8276, 8299, 8311, 8329, 8346, 8369, 8388, 8411, 8431, 8451, 8473, 8489, 8509, 8530, 8546, 8572, 8594, 8615, 8641, 8666, 8685, 8698, 8718, 8737, 8757, 8780, 8797, 8809, 8832, 8848, 8871, 8895, 8912, 8931, 8949, 8979, 8998, 9022, 9042, 9064, 9085, 9114, 9136, 9140 };

static double w_start = 0, w_step = .01;
static int w_cum[630] = {};

static double m_start = -3.14, m_step = .01;
static int m_cum[630] = {};

DebrisList DataManager::GenData_Leo(int Num)
{
    std::cout << "Generating " << Num << " debris" << std::endl;
    std::random_device rd;
    std::mt19937 gen(rd());

    std::uniform_int_distribution<int> a_dist(0, a_cum[330]);
    std::uniform_int_distribution<int> e_dist(0, e_cum[611]);
    std::uniform_int_distribution<int> i_dist(0, i_cum[299]);
    std::uniform_int_distribution<int> o_dist(0, o_cum[315]);
    std::uniform_int_distribution<int> w_dist(0, w_cum[629]);
    std::uniform_int_distribution<int> m_dist(0, m_cum[629]);


    DebrisList list(Num);

    for (int i = 0; i < Num; i++)
    {
        if ((i % (Num / 100)) == 0) 
        {
            std::cout << i << "..." << std::endl;
        }
        list[i].coord.a = GetRandomFromHist(a_start, a_step, a_cum, 331, a_dist(gen));
        list[i].coord.e = GetRandomFromHist(e_start, e_step, e_cum, 612, e_dist(gen));
        list[i].coord.i = GetRandomFromHist(i_start, i_step, i_cum, 300, i_dist(gen));
        list[i].coord.o = GetRandomFromHist(o_start, o_step, o_cum, 316, o_dist(gen));
        list[i].coord.w = GetRandomFromHist(w_start, w_step, w_cum, 630, w_dist(gen));
        list[i].coord.m = GetRandomFromHist(m_start, m_step, w_cum, 630, m_dist(gen));
    }

    // list[0] = { 6928, 0, CapUtil::Deg2Rad(37.556), CapUtil::Deg2Rad(200), 0, 0 };

    std::cout << "Finished generating debris" << std::endl;

    return list;
}

bool DataManager::HasDataFile(const char* FileName)
{
    return std::filesystem::exists(FileName);
}



